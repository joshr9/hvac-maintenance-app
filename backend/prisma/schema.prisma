generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// EXISTING MODELS (Updated with new relations)

model User {
  id              Int              @id @default(autoincrement())
  name            String
  email           String           @unique
  role            Role
  maintenanceLogs MaintenanceLog[]
  createdAt       DateTime         @default(now())
}

enum Role {
  TECHNICIAN
  ADMIN
}

model Property {
  id                 Int                    @id @default(autoincrement())
  name               String
  address            String                 @unique
  qrCode             String? // optional: could be linked to a unique ID
  suites             Suite[]
  jobs               Job[] // NEW: Add jobs relation
  jobTemplates       JobTemplate[] // ADD: Missing relation for JobTemplate
  zones              PropertyZone[]
  recurringTemplates RecurringJobTemplate[]
  messages           Message[]
  tasks              Task[]
}

model Suite {
  id         Int        @id @default(autoincrement())
  name       String
  tenant     Boolean    @default(false)
  property   Property   @relation(fields: [propertyId], references: [id])
  propertyId Int
  hvacUnits  HvacUnit[]
  jobs       Job[] // NEW: Add jobs relation

  scheduledMaintenance ScheduledMaintenance[]

  @@unique([name, propertyId])
}

model HvacUnit {
  id              Int              @id @default(autoincrement())
  label           String?
  serialNumber    String           @unique
  model           String
  installDate     DateTime
  filterSize      String?
  notes           String?
  suite           Suite?           @relation(fields: [suiteId], references: [id])
  suiteId         Int? // ‚Üê make optional for now
  maintenanceLogs MaintenanceLog[]
  jobs            Job[] // NEW: Add jobs relation

  scheduledMaintenance ScheduledMaintenance[]
}

model MaintenanceLog {
  id              Int                @id @default(autoincrement())
  hvacUnit        HvacUnit           @relation(fields: [hvacUnitId], references: [id])
  hvacUnitId      Int
  technician      User               @relation(fields: [technicianId], references: [id])
  technicianId    Int
  maintenanceType MaintenanceType
  status          MaintenanceStatus  @default(SCHEDULED)
  notes           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  photos          MaintenancePhoto[] // adding ability for multiple photos

  // Add optional fields for detailed checklist data
  checklistData     Json? // Store the full checklist as JSON
  serviceTechnician String? // Technician name from checklist
  specialNotes      String? // Special notes from checklist

  scheduledMaintenance ScheduledMaintenance?
}

model MaintenancePhoto {
  id               Int            @id @default(autoincrement())
  url              String
  maintenanceLog   MaintenanceLog @relation(fields: [maintenanceLogId], references: [id])
  maintenanceLogId Int
  uploadedAt       DateTime       @default(now())
}

model ScheduledMaintenance {
  id                 Int             @id @default(autoincrement())
  date               DateTime
  time               String // Store as HH:MM format
  maintenanceType    MaintenanceType
  assignedTechnician String
  priority           Priority        @default(MEDIUM)
  notes              String?
  reminderDays       Int             @default(1)
  status             ScheduleStatus  @default(SCHEDULED)

  // Relations
  suite      Suite     @relation(fields: [suiteId], references: [id])
  suiteId    Int
  hvacUnit   HvacUnit? @relation(fields: [hvacUnitId], references: [id])
  hvacUnitId Int?

  // When completed, link to the actual maintenance log
  completedLog   MaintenanceLog? @relation(fields: [completedLogId], references: [id])
  completedLogId Int?            @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NEW JOBS SYSTEM MODELS

// Main Jobs table - the comprehensive work order system
model Job {
  id          Int     @id @default(autoincrement())
  jobNumber   String  @unique // Auto-generated: DC-2025-001
  title       String
  description String?

  // Scheduling
  scheduledDate     DateTime?
  scheduledTime     String? // "09:00" format
  estimatedDuration Int? // minutes

  // Assignment
  assignedTechnician String?
  technicianId       Int? // Future: reference to User model

  // Location
  propertyId Int
  property   Property  @relation(fields: [propertyId], references: [id])
  suiteId    Int?
  suite      Suite?    @relation(fields: [suiteId], references: [id])
  hvacUnitId Int?
  hvacUnit   HvacUnit? @relation(fields: [hvacUnitId], references: [id])

  // Work Details
  workType        String // Your comprehensive work types (SNOW_CHECKS, etc.)
  maintenanceType MaintenanceType? // Maps to existing enum for compatibility
  priority        JobPriority      @default(MEDIUM)

  // Status Workflow
  status JobStatus @default(SCHEDULED)

  // messages and tasks
  messages Message[]
  tasks    Task[]

  // Financial
  estimatedCost Decimal? @db.Decimal(10, 2)
  actualCost    Decimal? @db.Decimal(10, 2)
  laborHours    Decimal? @db.Decimal(5, 2)
  laborRate     Decimal? @db.Decimal(8, 2)

  // Financial tracking (enhanced)
  totalCost    Decimal? @db.Decimal(10, 2) // Total cost of all line items
  totalPrice   Decimal? @db.Decimal(10, 2) // Total price of all line items
  profitMargin Decimal? @db.Decimal(5, 2) // Calculated profit percentage

  // Service-related
  primaryService String? // Main service category for this job

  recurringTemplateId   Int?
  recurringTemplate     RecurringJobTemplate? @relation(fields: [recurringTemplateId], references: [id])
  isRecurring           Boolean               @default(false)
  parentJobId           Int?
  parentJob             Job?                  @relation("RecurringJobs", fields: [parentJobId], references: [id])
  childJobs             Job[]                 @relation("RecurringJobs")
  zoneId                Int?
  zone                  Zone?                 @relation(fields: [zoneId], references: [id])
  originalScheduledDate DateTime?
  rescheduleReason      String?
  rescheduleCount       Int                   @default(0)

  // Timestamps
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  updatedAt   DateTime  @updatedAt

  // Notes
  customerNotes   String?
  technicianNotes String?
  internalNotes   String?

  // Relations
  lineItems   JobLineItem[] // ADD: Missing relation for JobLineItem
  materials   JobMaterial[]
  timeEntries JobTimeEntry[]
  photos      JobPhoto[]

  @@map("jobs")
}

// Materials/Parts used in jobs
model JobMaterial {
  id    Int @id @default(autoincrement())
  jobId Int
  job   Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  itemName  String
  quantity  Decimal  @db.Decimal(10, 2)
  unitCost  Decimal? @db.Decimal(8, 2)
  totalCost Decimal? @db.Decimal(10, 2)
  supplier  String?
  notes     String?

  createdAt DateTime @default(now())

  @@map("job_materials")
}

// Time tracking for jobs
model JobTimeEntry {
  id    Int @id @default(autoincrement())
  jobId Int
  job   Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  technicianName String
  startTime      DateTime
  endTime        DateTime?
  breakMinutes   Int       @default(0)
  totalMinutes   Int? // calculated field
  hourlyRate     Decimal?  @db.Decimal(8, 2)
  notes          String?

  createdAt DateTime @default(now())

  @@map("job_time_entries")
}

// Enhanced photo system for jobs
model JobPhoto {
  id    Int @id @default(autoincrement())
  jobId Int
  job   Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  url         String
  photoType   PhotoType @default(GENERAL)
  description String?

  createdAt DateTime @default(now())

  @@map("job_photos")
}

// Services Catalog - Dean Callan's 85+ services
model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  category    String // Service, Product, etc.
  unitPrice   Decimal? @db.Decimal(10, 2)
  unitCost    Decimal? @db.Decimal(10, 2)

  // Service attributes from CSV
  bookable        Boolean  @default(false)
  durationMinutes Int?
  quantityEnabled Boolean  @default(true)
  minimumQuantity Decimal? @db.Decimal(10, 2)
  maximumQuantity Decimal? @db.Decimal(10, 2)
  taxable         Boolean  @default(true)
  active          Boolean  @default(true)

  // Relations
  lineItems        JobLineItem[]
  templateServices JobTemplateService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

// Line Items - Services added to jobs
model JobLineItem {
  id    Int @id @default(autoincrement())
  jobId Int
  job   Job @relation(fields: [jobId], references: [id], onDelete: Cascade)

  serviceId Int?
  service   Service? @relation(fields: [serviceId], references: [id])

  // Snapshot data in case service changes
  serviceName String
  description String?
  quantity    Decimal  @default(1) @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(10, 2)
  unitCost    Decimal? @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  totalCost   Decimal? @db.Decimal(10, 2)

  notes     String?
  sortOrder Int     @default(0)

  createdAt DateTime @default(now())

  @@map("job_line_items")
}

// Job Templates - Pre-configured service packages
model JobTemplate {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  // Optional property association
  propertyId Int?
  property   Property? @relation(fields: [propertyId], references: [id])

  // Template metadata
  estimatedDuration Int? // minutes
  estimatedCost     Decimal? @db.Decimal(10, 2)
  estimatedPrice    Decimal? @db.Decimal(10, 2)

  // Relations
  services JobTemplateService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("job_templates")
}

// Services in templates with quantities
model JobTemplateService {
  id         Int         @id @default(autoincrement())
  templateId Int
  template   JobTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id])

  quantity  Decimal @default(1) @db.Decimal(10, 2)
  notes     String?
  sortOrder Int     @default(0)

  @@map("job_template_services")
}

// =======================
// TERRITORY MANAGEMENT MODELS
// =======================

// Zones for territory management (Boulder, Lafayette, etc.)
model Zone {
  id          Int     @id @default(autoincrement())
  name        String  @unique // "Boulder", "Lafayette", "Louisville", etc.
  description String?
  isActive    Boolean @default(true)

  // Relationships
  properties         PropertyZone[]
  jobs               Job[]
  recurringTemplates RecurringJobTemplate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("zones")
}

// Junction table for properties in zones (many-to-many)
model PropertyZone {
  id         Int      @id @default(autoincrement())
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  zoneId     Int
  zone       Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)

  // Zone assignment details
  isPrimary  Boolean  @default(true) // In case property spans multiple zones
  assignedAt DateTime @default(now())
  assignedBy String? // Who assigned this property to this zone

  @@unique([propertyId, zoneId])
  @@map("property_zones")
}

// Recurring job templates for territory-based maintenance
model RecurringJobTemplate {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  workType    String
  frequency   RecurrenceFrequency

  // Timing details
  dayOfWeek         Int? // 1-7 for weekly jobs (1=Monday, 7=Sunday)
  dayOfMonth        Int? // 1-31 for monthly jobs
  timeOfDay         String? // "09:00" format for preferred start time
  estimatedDuration Int? // minutes

  // Assignment
  priority           JobPriority @default(MEDIUM)
  assignedTechnician String? // Can pre-assign to specific tech

  // Targeting (either zone-wide or property-specific)
  zoneId     Int?
  zone       Zone?     @relation(fields: [zoneId], references: [id])
  propertyId Int?
  property   Property? @relation(fields: [propertyId], references: [id])

  // Template settings
  isActive       Boolean   @default(true)
  lastGenerated  DateTime? // Last time we auto-created jobs from this template
  nextGeneration DateTime? // When to next generate jobs

  // Generated jobs reference back to template
  generatedJobs Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recurring_job_templates")
}

// tasks and messages

model Channel {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  description  String?
  type         String    @default("channel")
  participants Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]

  @@map("channels")
}

model Message {
  id                Int      @id @default(autoincrement())
  content           String?
  authorId          String // Clerk user ID (string)
  channelId         Int
  parentId          Int?
  attachments       Json?
  reactions         Json?
  location          Json?
  savedToJobId      Int?
  savedToPropertyId Int?
  createdFromTaskId Int?
  pinned            Boolean  @default(false)
  edited            Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  createdFromTask Task?  @relation("MessageToTask", fields: [createdFromTaskId], references: [id])
  createdTasks    Task[] @relation("TaskFromMessage")

  channel         Channel   @relation(fields: [channelId], references: [id])
  parent          Message?  @relation("MessageReplies", fields: [parentId], references: [id])
  replies         Message[] @relation("MessageReplies")
  savedToJob      Job?      @relation(fields: [savedToJobId], references: [id])
  savedToProperty Property? @relation(fields: [savedToPropertyId], references: [id])

  @@map("messages")
}

model Task {
  id                   Int       @id @default(autoincrement())
  title                String
  description          String?
  status               String    @default("pending")
  priority             String    @default("medium")
  progress             Int       @default(0)
  estimatedTime        Int?
  dueDate              DateTime?
  completedAt          DateTime?
  createdFromMessageId Int?
  linkedToJobId        Int?
  linkedToPropertyId   Int?
  createdBy            String // Clerk user ID (string)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  assignees           TaskAssignee[]
  comments            TaskComment[]
  subtasks            Subtask[]
  attachments         TaskAttachment[]
  linkedToJob         Job?             @relation(fields: [linkedToJobId], references: [id])
  linkedToProperty    Property?        @relation(fields: [linkedToPropertyId], references: [id])
  createdFromMessage  Message?         @relation("TaskFromMessage", fields: [createdFromMessageId], references: [id])
  referencingMessages Message[]        @relation("MessageToTask")

  @@map("tasks")
}

model TaskAssignee {
  id     Int    @id @default(autoincrement())
  taskId Int
  userId String // Clerk user ID (string)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_assignees")
}

model TaskComment {
  id        Int      @id @default(autoincrement())
  taskId    Int
  userId    String // Clerk user ID (string)
  content   String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_comments")
}

model Subtask {
  id        Int     @id @default(autoincrement())
  taskId    Int
  title     String
  completed Boolean @default(false)
  order     Int     @default(0)
  task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("subtasks")
}

model TaskAttachment {
  id       Int     @id @default(autoincrement())
  taskId   Int
  filename String
  filepath String
  filesize Int?
  mimetype String?
  task     Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

// EXISTING ENUMS (Keep these)

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum ScheduleStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenanceType {
  INSPECTION
  FILTER_CHANGE
  FULL_SERVICE
  REPAIR
  OTHER
  FULL_INSPECTION_CHECKLIST
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// NEW ENUMS FOR JOBS SYSTEM

// Job Status Enum
enum JobStatus {
  SCHEDULED
  DISPATCHED
  IN_PROGRESS
  COMPLETED
  INVOICED
  CLOSED
  CANCELLED
}

// Job Priority Enum (separate from existing Priority to avoid conflicts)
enum JobPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Photo types for better organization
enum PhotoType {
  BEFORE
  DURING
  AFTER
  PROBLEM
  SOLUTION
  GENERAL
}

// Service Categories enum (optional, for organization)
enum ServiceCategory {
  HVAC
  CLEANING
  LANDSCAPING
  SNOW_REMOVAL
  ELECTRICAL
  PLUMBING
  INSPECTIONS
  MAINTENANCE
  OTHER
}

// RecurrenceFrequency for jobs 
enum RecurrenceFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}
