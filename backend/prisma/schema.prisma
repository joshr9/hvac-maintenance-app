generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  role          Role
  maintenanceLogs MaintenanceLog[]
  createdAt     DateTime       @default(now())
}

enum Role {
  TECHNICIAN
  ADMIN
}

model Property {
  id        Int      @id @default(autoincrement())
  name      String
  address   String   @unique
  qrCode    String?  // optional: could be linked to a unique ID
  suites    Suite[]
}

model Suite {
  id         Int         @id @default(autoincrement())
  name       String
  tenant     Boolean     @default(false)
  property   Property    @relation(fields: [propertyId], references: [id])
  propertyId Int
  hvacUnits  HvacUnit[]

  scheduledMaintenance ScheduledMaintenance[] 

  @@unique([name, propertyId])
}

model HvacUnit {
  id              Int             @id @default(autoincrement())
  label           String?
  serialNumber    String          @unique
  model           String
  installDate     DateTime
  filterSize      String?
  notes           String?
  suite           Suite?          @relation(fields: [suiteId], references: [id])
  suiteId         Int?            // ‚Üê make optional for now
  maintenanceLogs MaintenanceLog[]

  scheduledMaintenance ScheduledMaintenance[] 

}

model MaintenanceLog {
  id           Int       @id @default(autoincrement())
  hvacUnit     HvacUnit  @relation(fields: [hvacUnitId], references: [id])
  hvacUnitId   Int
  technician   User      @relation(fields: [technicianId], references: [id])
  technicianId Int
  maintenanceType MaintenanceType
  status       MaintenanceStatus @default(SCHEDULED)
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  photos       MaintenancePhoto[] // adding ability for multiple photos

  // Add optional fields for detailed checklist data
  checklistData Json?     // Store the full checklist as JSON
  serviceTechnician String? // Technician name from checklist
  specialNotes String?    // Special notes from checklist

  scheduledMaintenance ScheduledMaintenance? 
}


model MaintenancePhoto {
  id               Int             @id @default(autoincrement())
  url              String
  maintenanceLog   MaintenanceLog  @relation(fields: [maintenanceLogId], references: [id])
  maintenanceLogId Int
  uploadedAt       DateTime        @default(now())
}

model ScheduledMaintenance {
  id                 Int      @id @default(autoincrement())
  date               DateTime
  time               String   // Store as HH:MM format
  maintenanceType    MaintenanceType
  assignedTechnician String
  priority           Priority @default(MEDIUM)
  notes              String?
  reminderDays       Int      @default(1)
  status             ScheduleStatus @default(SCHEDULED)
  
  // Relations
  suite              Suite    @relation(fields: [suiteId], references: [id])
  suiteId            Int
  hvacUnit           HvacUnit? @relation(fields: [hvacUnitId], references: [id])
  hvacUnitId         Int?
  
  // When completed, link to the actual maintenance log
  completedLog       MaintenanceLog? @relation(fields: [completedLogId], references: [id])
  completedLogId     Int?            @unique
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum Priority {
  LOW
  MEDIUM  
  HIGH
}

enum ScheduleStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenanceType {
  INSPECTION
  FILTER_CHANGE
  FULL_SERVICE
  REPAIR
  OTHER
  FULL_INSPECTION_CHECKLIST
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}